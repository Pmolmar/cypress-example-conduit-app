version: 2.1

# commands:
#   save-partial-coverage-report:
#     description: |
#       Saves a single possibly partial coverage report by adding it to the
#       workspace. This way different CircleCI jobs can run parts of the tests
#       and save their results to be merged later.
#     parameters:
#       coverage-filename:
#         type: string
#         default: coverage/coverage-final.json
#         description: |
#           Path to the final coverage JSON file produced by "nyc" tool.
#           Typically called "coverage/coverage-final.json"
#       label:
#         type: string
#         default: default
#         description: |
#           Human name for the coverage file. For example, when saving both Cypress
#           and Jest coverage file, use "cypress" and "jest" to have distinct filenames.
#     steps:
#       # do not crash if the coverage is not found
#       # because a particular CI job might not have any tests to run
#       # producing no coverage.
#       - run: mkdir coverage-part || true
#       - run: touch coverage-part/.placeholder || true
#       # use unique job id to avoid accidentally overwriting coverage file
#       # and in case the build is parallel, use node index too
#       - run: cp coverage/coverage-final.json coverage-part/coverage-default-$CIRCLE_WORKFLOW_JOB_ID-index-$CIRCLE_NODE_INDEX.json || true
#       - run: ls -la coverage-part
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             # note that the current folder is "project"
#             # so we need to save the full path correctly
#             # otherwise the files will not be restored in the expected location
#             - 'project/coverage-part/*'
#   merge-coverage-reports:
#     description: |
#       Merges individual code coverage files using "nyc" tool
#       https://github.com/istanbuljs/nyc.
#       All individual files should be in the folder "coverage-part"
#     steps:
#       - run: ls -la .
#       - run: ls -la coverage-part || true
#       - run: npx nyc merge coverage-part
#       - run: mkdir .nyc_output || true
#       # storing the combined report in ".nyc_output/out.json"
#       # allows other NYC commands to find it right away
#       - run: mv coverage.json .nyc_output/out.json
#       - run: ls -la .nyc_output

jobs:
  test:
    description: Ejecucion de test cypress
    docker:
      - image: cypress/base:14
    steps:
      - checkout
      - run:
          name: Instalando proyecto
          command: npm install
      - run:
          name: Incia aplicacion
          command: npm run start
      - run:
          name: Incia aplicacion
          command: |
            npx wait-on http://localhost:4100 &
            npm run cypress:test
      # - run:
      #     name: Start server and wait for it to be ready
      #     command: |
      #       npm run start:coverage &
      #       npx wait-on http://localhost:4100
      # - run:
      #     name: Run Cypress tests
      #     command: npx cypress run
      # - save-partial-coverage-report:
      #     label: e2e
      # - attach_workspace:
      #     at: ~/
      # - merge-coverage-reports
      # - run:
      #     name: generate coverage report
      #     command: |
      #       npx nyc report \
      #         --reporter lcov --reporter text-summary \
      #         --report-dir coverage
      # - store_artifacts:
      #     path: coverage
      # - run:
      #     command: npm run coveralls || true
  dockerize:
    description: Compila y sube imagen docker
    docker:
      - image: docker:19.03.12
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.12
      - run:
          name: Construye Imagen
          command: |
            docker build -t alu0101103181/practica-final:${CIRCLE_SHA1} .
            docker tag alu0101103181/practica-final:${CIRCLE_SHA1} alu0101103181/practica-final:latest
      - run:
          name: Sube Imagen
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker push alu0101103181/practica-final:${CIRCLE_SHA1}
            docker push alu0101103181/practica-final:latest

  deploy:
    description: Despliega en GKE
    docker:
      - image: google/cloud-sdk:latest
    steps:
      - checkout
      - run:
          name: Configure Google Cloud SDK
          command: |
            echo "$GCLOUD_SERVICE_KEY" | base64 --decode -i > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud config set project sytw-428919
            gcloud config set compute/zone europe-west4-a
            gcloud container clusters get-credentials practica-final --project=sytw-428919 --zone=europe-west4-a
      - run:
          name: Update Deployment in GKE
          command: |
            kubectl set image deployment/practica-final practica-final=alu0101103181/practica-final:${CIRCLE_SHA1}

workflows:
  version: 2
  test:
    jobs:
      - test
      - dockerize:
          requires:
            - test
      - deploy:
          requires:
            - dockerize
